fun main(args: Array<String>) {
/*
    print("Enter a country abbreviation: ")

    val state: String? = readLine() // 자바에서는 스캐너를 생성해야 하지만 kotlin에서는 top level function이라 곧바로 사용 가능함
*/

/*    if (state == "CA") {
        println("The capital is Ottawa")
    } else if (state == "KR") {
        print("The capital is Seoul")
    } else {
        println("Sorry")
    }*/

    // kotlin에는 switch가 없음. 대신 when을 사용함
/*   val capital:String?
    when (state) {
        "CA" -> capital = "The capital is Ottawa"
        "KR" -> capital = "The capital is Seoul"
        else -> capital = "Sorry"
    }*/

/*    val capital:String =
    when (state) {
        "CA" -> "The capital is Ottawa"
        "KR" -> "The capital is Seoul"
        else -> "Sorry"
    }

    println("The capital is $capital")
    */

    val theAnswer = 50
    when (theAnswer) {
        in 1..39 -> println("Not Yet")
        in 40..45 -> println("close enough")
        else -> {
            println("Definitely not")
            println("No, really!")
        }
    }


}



fun main(args: Array<String>) {
    // kotlin은 null 오류를 처리하기 쉬움
    // 기본적으로 String은 null을 허용하지 않지만 데이터 타입 뒤에 물음표를 넣으면 null을 기본값으로 넣을 수 있음
    var nullValue: String? = null
    println(nullValue)

    // Int도 마찬가지. 그런데 여기서 nullValue의 length라니 말도 안되는 코드인데
    // nullValue에도 물음표를 붙여주면 Int 형 변수값도 null이 됨
    val l:Int? = nullValue?.length
    println("The length is $l")

    if (l == null) {
        println("Length is null")
    }

    val message = if(l != null) {
        "Length is $l"
    } else {
        "l is null"
    }
    println(message)

    // l의 값을 l2에 넣어줌
    // l2의 값이 null이면 -1, null이 아니면 l2 본인의 값을 출력
    val l2:Int = l ?: -1
    println("The value of l2 is $l2")

    try {
        // null assertion
        // 변수값이 null이 아닌것을 확신할때 느낌표 두개 붙여줌
        // 그런데 null이라면? 오류 방지를 위해 try-catch 를 사용함
        val l3 = l!!
        println("The value of l3 is $l3")
    } catch (e: java.lang.NullPointerException) {
        println("l3 is null")
    }

}

fun main(args: Array<String>) {
    val colors = arrayOf("Red", "Green", "Blue")
    val values = intArrayOf(1,3,5,7,9)

    printHeader("For each loop")
    for (color in colors) {
        println(color)
    }

    for (value in values) {
        println(value)
    }
    printHeader("For loop with indices")

    // index 의 복수형 indices
    // step 2: instead of seeing every item in the array, I'll see every other item
    for (i in values.indices step 2){
        println(values[i])
    }

    // 또는 0..colors.size-1: colors.size 는 3인데, 0부터 3까지 하면 indexOutOfBounds 오류 남, 이에 -1을 붙여줌
    for (i in 0 until colors.size) {
        println(colors[i])
    }
}

fun printHeader(label: String) {
    println("**************")
    println(label)
    println("**************")
}

fun main(args: Array<String>) {
    val states = arrayOf("CA", "KR", "NA")

    var counter = 0
/*    while(counter < states.size) {
        println("counter = $counter")
        println("state = ${states.get(counter)}")
        counter ++
    }
    */
    counter = 0
    printHeader(" Do / While loop")
    do {
        println("states = ${states.get(counter)}")
        counter ++
    } while(counter < states.size)
}

fun printHeader(label: String) {
    println("**************")
    println(label)
    println("**************")
}